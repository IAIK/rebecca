
// Generated by Cadence Encounter(R) RTL Compiler RC14.27 - v14.20-s064_1

// Verification Directory fv/dom_and 

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [24:0] in_0, in_1;
  output [24:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module dom_and(ClkxCI, RstxBI, XxDI, YxDI, ZxDI, QxDO);
  input ClkxCI, RstxBI;
  input [4:0] XxDI, YxDI;
  input [9:0] ZxDI;
  output [4:0] QxDO;
  wire [24:0] FFxDP;
  bmux mux_FFxDP_77_15(.ctl (n_32), .in_0
       (25'b0000000000000000000000000), .in_1
       (25'b0000000000000000000000000), .z ());
  and g1 (\Xi_mul_Yj[24] , XxDI[4], YxDI[4]);
  and g2 (Xi_mul_Yj_234, XxDI[4], YxDI[3]);
  and g3 (Xi_mul_Yj_232, XxDI[4], YxDI[2]);
  and g4 (Xi_mul_Yj_230, XxDI[4], YxDI[1]);
  and g5 (Xi_mul_Yj_229, XxDI[4], YxDI[0]);
  and g6 (Xi_mul_Yj_226, XxDI[3], YxDI[4]);
  and g7 (\Xi_mul_Yj[18] , XxDI[3], YxDI[3]);
  and g8 (Xi_mul_Yj_223, XxDI[3], YxDI[2]);
  and g9 (Xi_mul_Yj_221, XxDI[3], YxDI[1]);
  and g10 (Xi_mul_Yj_220, XxDI[3], YxDI[0]);
  and g11 (Xi_mul_Yj_217, XxDI[2], YxDI[4]);
  and g12 (Xi_mul_Yj_214, XxDI[2], YxDI[3]);
  and g13 (\Xi_mul_Yj[12] , XxDI[2], YxDI[2]);
  and g14 (Xi_mul_Yj_211, XxDI[2], YxDI[1]);
  and g15 (Xi_mul_Yj_210, XxDI[2], YxDI[0]);
  and g16 (Xi_mul_Yj_207, XxDI[1], YxDI[4]);
  and g17 (Xi_mul_Yj_204, XxDI[1], YxDI[3]);
  and g18 (Xi_mul_Yj_201, XxDI[1], YxDI[2]);
  and g19 (\Xi_mul_Yj[6] , XxDI[1], YxDI[1]);
  and g20 (Xi_mul_Yj_199, XxDI[1], YxDI[0]);
  and g21 (Xi_mul_Yj_196, XxDI[0], YxDI[4]);
  and g22 (Xi_mul_Yj_193, XxDI[0], YxDI[3]);
  and g23 (Xi_mul_Yj_190, XxDI[0], YxDI[2]);
  and g24 (Xi_mul_Yj, XxDI[0], YxDI[1]);
  and g25 (\Xi_mul_Yj[0] , XxDI[0], YxDI[0]);
  xor g28 (n_35, Xi_mul_Yj, ZxDI[0]);
  xor g30 (n_37, Xi_mul_Yj_190, ZxDI[1]);
  xor g32 (n_39, Xi_mul_Yj_193, ZxDI[3]);
  xor g34 (n_41, Xi_mul_Yj_196, ZxDI[6]);
  xor g36 (n_43, Xi_mul_Yj_199, ZxDI[0]);
  xor g39 (n_46, Xi_mul_Yj_201, ZxDI[2]);
  xor g41 (n_48, Xi_mul_Yj_204, ZxDI[4]);
  xor g43 (n_50, Xi_mul_Yj_207, ZxDI[7]);
  xor g45 (n_52, Xi_mul_Yj_210, ZxDI[1]);
  xor g47 (n_54, Xi_mul_Yj_211, ZxDI[2]);
  xor g50 (n_57, Xi_mul_Yj_214, ZxDI[5]);
  xor g52 (n_59, Xi_mul_Yj_217, ZxDI[8]);
  xor g54 (n_61, Xi_mul_Yj_220, ZxDI[3]);
  xor g56 (n_63, Xi_mul_Yj_221, ZxDI[4]);
  xor g58 (n_65, Xi_mul_Yj_223, ZxDI[5]);
  xor g61 (n_68, Xi_mul_Yj_226, ZxDI[9]);
  xor g63 (n_70, Xi_mul_Yj_229, ZxDI[6]);
  xor g65 (n_72, Xi_mul_Yj_230, ZxDI[7]);
  xor g67 (n_74, Xi_mul_Yj_232, ZxDI[8]);
  xor g69 (n_76, Xi_mul_Yj_234, ZxDI[9]);
  CDN_flop \FFxDP_reg[0] (.clk (ClkxCI), .d (\Xi_mul_Yj[0] ), .sena
       (1'b1), .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[0]));
  CDN_flop \FFxDP_reg[1] (.clk (ClkxCI), .d (n_35), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[1]));
  CDN_flop \FFxDP_reg[2] (.clk (ClkxCI), .d (n_37), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[2]));
  CDN_flop \FFxDP_reg[3] (.clk (ClkxCI), .d (n_39), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[3]));
  CDN_flop \FFxDP_reg[4] (.clk (ClkxCI), .d (n_41), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[4]));
  CDN_flop \FFxDP_reg[5] (.clk (ClkxCI), .d (n_43), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[5]));
  CDN_flop \FFxDP_reg[6] (.clk (ClkxCI), .d (\Xi_mul_Yj[6] ), .sena
       (1'b1), .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[6]));
  CDN_flop \FFxDP_reg[7] (.clk (ClkxCI), .d (n_46), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[7]));
  CDN_flop \FFxDP_reg[8] (.clk (ClkxCI), .d (n_48), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[8]));
  CDN_flop \FFxDP_reg[9] (.clk (ClkxCI), .d (n_50), .sena (1'b1), .aclr
       (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[9]));
  CDN_flop \FFxDP_reg[10] (.clk (ClkxCI), .d (n_52), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[10]));
  CDN_flop \FFxDP_reg[11] (.clk (ClkxCI), .d (n_54), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[11]));
  CDN_flop \FFxDP_reg[12] (.clk (ClkxCI), .d (\Xi_mul_Yj[12] ), .sena
       (1'b1), .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[12]));
  CDN_flop \FFxDP_reg[13] (.clk (ClkxCI), .d (n_57), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[13]));
  CDN_flop \FFxDP_reg[14] (.clk (ClkxCI), .d (n_59), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[14]));
  CDN_flop \FFxDP_reg[15] (.clk (ClkxCI), .d (n_61), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[15]));
  CDN_flop \FFxDP_reg[16] (.clk (ClkxCI), .d (n_63), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[16]));
  CDN_flop \FFxDP_reg[17] (.clk (ClkxCI), .d (n_65), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[17]));
  CDN_flop \FFxDP_reg[18] (.clk (ClkxCI), .d (\Xi_mul_Yj[18] ), .sena
       (1'b1), .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[18]));
  CDN_flop \FFxDP_reg[19] (.clk (ClkxCI), .d (n_68), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[19]));
  CDN_flop \FFxDP_reg[20] (.clk (ClkxCI), .d (n_70), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[20]));
  CDN_flop \FFxDP_reg[21] (.clk (ClkxCI), .d (n_72), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[21]));
  CDN_flop \FFxDP_reg[22] (.clk (ClkxCI), .d (n_74), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[22]));
  CDN_flop \FFxDP_reg[23] (.clk (ClkxCI), .d (n_76), .sena (1'b1),
       .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[23]));
  CDN_flop \FFxDP_reg[24] (.clk (ClkxCI), .d (\Xi_mul_Yj[24] ), .sena
       (1'b1), .aclr (n_32), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[24]));
  not g74 (n_32, RstxBI);
  xor g75 (n_291, FFxDP[20], FFxDP[21]);
  xor g76 (n_292, FFxDP[22], FFxDP[23]);
  xor g77 (n_293, FFxDP[24], n_291);
  xor g78 (QxDO[4], n_292, n_293);
  xor g79 (n_294, FFxDP[15], FFxDP[16]);
  xor g80 (n_295, FFxDP[17], FFxDP[18]);
  xor g81 (n_296, FFxDP[19], n_294);
  xor g82 (QxDO[3], n_295, n_296);
  xor g83 (n_297, FFxDP[10], FFxDP[11]);
  xor g84 (n_298, FFxDP[12], FFxDP[13]);
  xor g85 (n_299, FFxDP[14], n_297);
  xor g86 (QxDO[2], n_298, n_299);
  xor g87 (n_300, FFxDP[5], FFxDP[6]);
  xor g88 (n_301, FFxDP[7], FFxDP[8]);
  xor g89 (n_302, FFxDP[9], n_300);
  xor g90 (QxDO[1], n_301, n_302);
  xor g91 (n_303, FFxDP[0], FFxDP[1]);
  xor g92 (n_304, FFxDP[2], FFxDP[3]);
  xor g93 (n_305, FFxDP[4], n_303);
  xor g94 (QxDO[0], n_304, n_305);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
