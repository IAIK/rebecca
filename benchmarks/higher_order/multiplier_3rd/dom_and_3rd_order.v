
// Generated by Cadence Encounter(R) RTL Compiler RC14.27 - v14.20-s064_1

// Verification Directory fv/dom_and 

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [15:0] in_0, in_1;
  output [15:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module dom_and(ClkxCI, RstxBI, XxDI, YxDI, ZxDI, QxDO);
  input ClkxCI, RstxBI;
  input [3:0] XxDI, YxDI;
  input [5:0] ZxDI;
  output [3:0] QxDO;
  wire [15:0] FFxDP;
  bmux mux_FFxDP_77_15(.ctl (n_22), .in_0 (16'b0000000000000000), .in_1
       (16'b0000000000000000), .z ());
  and g1 (\Xi_mul_Yj[15] , XxDI[3], YxDI[3]);
  and g2 (Xi_mul_Yj_149, XxDI[3], YxDI[2]);
  and g3 (Xi_mul_Yj_147, XxDI[3], YxDI[1]);
  and g4 (Xi_mul_Yj_146, XxDI[3], YxDI[0]);
  and g5 (Xi_mul_Yj_143, XxDI[2], YxDI[3]);
  and g6 (\Xi_mul_Yj[10] , XxDI[2], YxDI[2]);
  and g7 (Xi_mul_Yj_140, XxDI[2], YxDI[1]);
  and g8 (Xi_mul_Yj_139, XxDI[2], YxDI[0]);
  and g9 (Xi_mul_Yj_136, XxDI[1], YxDI[3]);
  and g10 (Xi_mul_Yj_133, XxDI[1], YxDI[2]);
  and g11 (\Xi_mul_Yj[5] , XxDI[1], YxDI[1]);
  and g12 (Xi_mul_Yj_131, XxDI[1], YxDI[0]);
  and g13 (Xi_mul_Yj_128, XxDI[0], YxDI[3]);
  and g14 (Xi_mul_Yj_125, XxDI[0], YxDI[2]);
  and g15 (Xi_mul_Yj, XxDI[0], YxDI[1]);
  and g16 (\Xi_mul_Yj[0] , XxDI[0], YxDI[0]);
  xor g19 (n_25, Xi_mul_Yj, ZxDI[0]);
  xor g21 (n_27, Xi_mul_Yj_125, ZxDI[1]);
  xor g23 (n_29, Xi_mul_Yj_128, ZxDI[3]);
  xor g25 (n_31, Xi_mul_Yj_131, ZxDI[0]);
  xor g28 (n_34, Xi_mul_Yj_133, ZxDI[2]);
  xor g30 (n_36, Xi_mul_Yj_136, ZxDI[4]);
  xor g32 (n_38, Xi_mul_Yj_139, ZxDI[1]);
  xor g34 (n_40, Xi_mul_Yj_140, ZxDI[2]);
  xor g37 (n_43, Xi_mul_Yj_143, ZxDI[5]);
  xor g39 (n_45, Xi_mul_Yj_146, ZxDI[3]);
  xor g41 (n_47, Xi_mul_Yj_147, ZxDI[4]);
  xor g43 (n_49, Xi_mul_Yj_149, ZxDI[5]);
  CDN_flop \FFxDP_reg[0] (.clk (ClkxCI), .d (\Xi_mul_Yj[0] ), .sena
       (1'b1), .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[0]));
  CDN_flop \FFxDP_reg[1] (.clk (ClkxCI), .d (n_25), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[1]));
  CDN_flop \FFxDP_reg[2] (.clk (ClkxCI), .d (n_27), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[2]));
  CDN_flop \FFxDP_reg[3] (.clk (ClkxCI), .d (n_29), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[3]));
  CDN_flop \FFxDP_reg[4] (.clk (ClkxCI), .d (n_31), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[4]));
  CDN_flop \FFxDP_reg[5] (.clk (ClkxCI), .d (\Xi_mul_Yj[5] ), .sena
       (1'b1), .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[5]));
  CDN_flop \FFxDP_reg[6] (.clk (ClkxCI), .d (n_34), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[6]));
  CDN_flop \FFxDP_reg[7] (.clk (ClkxCI), .d (n_36), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[7]));
  CDN_flop \FFxDP_reg[8] (.clk (ClkxCI), .d (n_38), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[8]));
  CDN_flop \FFxDP_reg[9] (.clk (ClkxCI), .d (n_40), .sena (1'b1), .aclr
       (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (FFxDP[9]));
  CDN_flop \FFxDP_reg[10] (.clk (ClkxCI), .d (\Xi_mul_Yj[10] ), .sena
       (1'b1), .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[10]));
  CDN_flop \FFxDP_reg[11] (.clk (ClkxCI), .d (n_43), .sena (1'b1),
       .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[11]));
  CDN_flop \FFxDP_reg[12] (.clk (ClkxCI), .d (n_45), .sena (1'b1),
       .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[12]));
  CDN_flop \FFxDP_reg[13] (.clk (ClkxCI), .d (n_47), .sena (1'b1),
       .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[13]));
  CDN_flop \FFxDP_reg[14] (.clk (ClkxCI), .d (n_49), .sena (1'b1),
       .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[14]));
  CDN_flop \FFxDP_reg[15] (.clk (ClkxCI), .d (\Xi_mul_Yj[15] ), .sena
       (1'b1), .aclr (n_22), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (FFxDP[15]));
  not g48 (n_22, RstxBI);
  xor g49 (n_188, FFxDP[12], FFxDP[13]);
  xor g50 (n_189, FFxDP[14], FFxDP[15]);
  xor g51 (QxDO[3], n_188, n_189);
  xor g52 (n_190, FFxDP[8], FFxDP[9]);
  xor g53 (n_191, FFxDP[10], FFxDP[11]);
  xor g54 (QxDO[2], n_190, n_191);
  xor g55 (n_192, FFxDP[4], FFxDP[5]);
  xor g56 (n_193, FFxDP[6], FFxDP[7]);
  xor g57 (QxDO[1], n_192, n_193);
  xor g58 (n_194, FFxDP[0], FFxDP[1]);
  xor g59 (n_195, FFxDP[2], FFxDP[3]);
  xor g60 (QxDO[0], n_194, n_195);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
