`undef SYNTHESIS
// Generated by Cadence Encounter(R) RTL Compiler v08.10-s238_1

module lin_map_MATRIX_SEL1482566961_1_to_4_7_downto_0(DataInxDI,
     DataOutxDO);
  input [7:0] DataInxDI;
  output [7:0] DataOutxDO;
  xor g4 (Q_8, DataInxDI[7], DataInxDI[6]);
  xor g6 (Q_10, Q_8, DataInxDI[5]);
  xor g19 (Q_27, DataInxDI[6], DataInxDI[5]);
  xor g21 (Q_29, Q_27, DataInxDI[4]);
  xor g26 (DataOutxDO[6], Q_29, DataInxDI[0]);
  xor g36 (Q_43, Q_27, DataInxDI[1]);
  xor g38 (DataOutxDO[5], Q_43, DataInxDI[0]);
  xor g50 (DataOutxDO[4], Q_10, DataInxDI[0]);
  xor g83 (DataOutxDO[1], Q_27, DataInxDI[0]);
  xor g97 (n_107, Q_10, DataInxDI[2]);
  xor g98 (n_108, DataInxDI[1], DataInxDI[0]);
  xor g99 (DataOutxDO[7], n_107, n_108);
  xor g100 (n_110, DataInxDI[7], DataInxDI[4]);
  xor g101 (n_111, DataInxDI[3], DataInxDI[1]);
  xor g102 (n_112, DataInxDI[0], n_110);
  xor g103 (DataOutxDO[3], n_111, n_112);
  xor g104 (n_114, DataInxDI[6], DataInxDI[3]);
  xor g105 (n_115, DataInxDI[2], DataInxDI[1]);
  xor g106 (n_116, DataInxDI[0], n_114);
  xor g107 (DataOutxDO[0], n_115, n_116);
  assign DataOutxDO[2] = DataInxDI[0];
endmodule

module square_scaler(DataInxDI, DataOutxDO);
  input [3:0] DataInxDI;
  output [3:0] DataOutxDO;
  xor g1 (DataOutxDO[3], DataInxDI[0], DataInxDI[2]);
  xor g2 (DataOutxDO[2], DataInxDI[1], DataInxDI[3]);
  xor g3 (DataOutxDO[1], DataInxDI[1], DataInxDI[0]);
  assign DataOutxDO[0] = DataInxDI[0];
endmodule

module lin_map_MATRIX_SEL19800_1_to_2_7_downto_0(DataInxDI, DataOutxDO);
  input [7:0] DataInxDI;
  output [7:0] DataOutxDO;
  xor g5 (DataOutxDO[7], DataInxDI[5], DataInxDI[3]);
  xor g15 (DataOutxDO[6], DataInxDI[7], DataInxDI[3]);
  xor g28 (DataOutxDO[5], DataInxDI[6], DataInxDI[0]);
  xor g33 (Q_37, DataInxDI[7], DataInxDI[5]);
  xor g36 (DataOutxDO[4], Q_37, DataInxDI[3]);
  xor g71 (Q_74, DataInxDI[5], DataInxDI[4]);
  xor g75 (DataOutxDO[1], Q_74, DataInxDI[1]);
  xor g82 (Q_85, DataInxDI[6], DataInxDI[4]);
  xor g86 (DataOutxDO[0], Q_85, DataInxDI[1]);
  xor g92 (n_102, DataInxDI[6], DataInxDI[5]);
  xor g93 (n_103, DataInxDI[3], DataInxDI[2]);
  xor g94 (n_104, DataInxDI[0], n_102);
  xor g95 (DataOutxDO[2], n_103, n_104);
  xor g96 (n_106, Q_74, DataInxDI[3]);
  xor g97 (n_107, DataInxDI[7], DataInxDI[6]);
  xor g98 (DataOutxDO[3], n_106, n_107);
endmodule

module gf2_mul_N4(AxDI, BxDI, QxDO);
  input [3:0] AxDI, BxDI;
  output [3:0] QxDO;
  xor g1 (n_3, AxDI[3], AxDI[2]);
  xor g2 (n_4, BxDI[3], BxDI[2]);
  and g3 (n_5, n_3, n_4);
  and g4 (n_6, AxDI[2], BxDI[2]);
  xor g5 (\PH[0] , n_5, n_6);
  and g9 (n_10, AxDI[3], BxDI[3]);
  xor g10 (\PH[1] , n_5, n_10);
  xor g11 (n_15, AxDI[1], AxDI[0]);
  xor g12 (n_16, BxDI[1], BxDI[0]);
  and g13 (n_17, n_15, n_16);
  and g14 (n_18, AxDI[0], BxDI[0]);
  xor g15 (\PL[0] , n_17, n_18);
  and g19 (n_22, AxDI[1], BxDI[1]);
  xor g20 (\PL[1] , n_17, n_22);
  xor g23 (n_25, AA, AA_23);
  xor g24 (n_26, BB, BB_24);
  and g25 (n_27, n_25, n_26);
  and g26 (n_28, AA_23, BB_24);
  xor g27 (\P[1] , n_27, n_28);
  and g31 (n_32, AA, BB);
  xor g32 (n_33, n_27, n_32);
  xor g33 (\P[0] , n_33, \P[1] );
  xor g36 (AA_23, AxDI[2], AxDI[0]);
  xor g37 (AA, AxDI[3], AxDI[1]);
  xor g38 (BB_24, BxDI[2], BxDI[0]);
  xor g39 (BB, BxDI[3], BxDI[1]);
  xor g40 (QxDO[0], \PL[0] , \P[0] );
  xor g41 (QxDO[1], \PL[1] , \P[1] );
  xor g42 (QxDO[2], \PH[0] , \P[0] );
  xor g43 (QxDO[3], \PH[1] , \P[1] );
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module
     shared_mul_gf4_PIPELINED7955827_1_to_3_7_downto_0_SHARES2(ClkxCI,
     RstxBI, \XxDI[0] , \XxDI[1] , \YxDI[0] , \YxDI[1] , \ZxDI[0] ,
     \QxDO[0] , \QxDO[1] );
  input ClkxCI, RstxBI;
  input [3:0] \XxDI[0] , \XxDI[1] , \YxDI[0] , \YxDI[1] , \ZxDI[0] ;
  output [3:0] \QxDO[0] , \QxDO[1] ;
  gf2_mul_N4
       \gen_inner_multipliers_g[1].gen_outer_multipliers_g[1].gf4_mul
       (.AxDI (\XxDI[1] ), .BxDI (\YxDI[1] ), .QxDO ({\FFxDN[3][3] ,
       \FFxDN[3][2] , \FFxDN[3][1] , \FFxDN[3][0] }));
  gf2_mul_N4
       \gen_inner_multipliers_g[1].gen_outer_multipliers_g[0].gf4_mul
       (.AxDI (\XxDI[1] ), .BxDI (\YxDI[0] ), .QxDO ({\Xi_mul_Yj[2][3]
       , \Xi_mul_Yj[2][2] , \Xi_mul_Yj[2][1] , \Xi_mul_Yj[2][0] }));
  gf2_mul_N4
       \gen_inner_multipliers_g[0].gen_outer_multipliers_g[1].gf4_mul
       (.AxDI (\XxDI[0] ), .BxDI (\YxDI[1] ), .QxDO ({\Xi_mul_Yj[1][3]
       , \Xi_mul_Yj[1][2] , \Xi_mul_Yj[1][1] , \Xi_mul_Yj[1][0] }));
  gf2_mul_N4
       \gen_inner_multipliers_g[0].gen_outer_multipliers_g[0].gf4_mul
       (.AxDI (\XxDI[0] ), .BxDI (\YxDI[0] ), .QxDO ({\FFxDN[0][3] ,
       \FFxDN[0][2] , \FFxDN[0][1] , \FFxDN[0][0] }));
  bmux \mux_FFxDP[3]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[3][3] ,
       \FFxDN[3][2] , \FFxDN[3][1] , \FFxDN[3][0] }), .in_1 (4'b0000),
       .z ());
  bmux \mux_FFxDP[2]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[2][3] ,
       \FFxDN[2][2] , \FFxDN[2][1] , \FFxDN[2][0] }), .in_1 (4'b0000),
       .z ());
  bmux \mux_FFxDP[1]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[1][3] ,
       \FFxDN[1][2] , \FFxDN[1][1] , \FFxDN[1][0] }), .in_1 (4'b0000),
       .z ());
  bmux \mux_FFxDP[0]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[0][3] ,
       \FFxDN[0][2] , \FFxDN[0][1] , \FFxDN[0][0] }), .in_1 (4'b0000),
       .z ());
  CDN_flop \FFxDP_reg[0][0] (.clk (ClkxCI), .d (\FFxDN[0][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[0][0] ));
  CDN_flop \FFxDP_reg[0][1] (.clk (ClkxCI), .d (\FFxDN[0][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[0][1] ));
  CDN_flop \FFxDP_reg[0][2] (.clk (ClkxCI), .d (\FFxDN[0][2] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[0][2] ));
  CDN_flop \FFxDP_reg[0][3] (.clk (ClkxCI), .d (\FFxDN[0][3] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[0][3] ));
  CDN_flop \FFxDP_reg[1][0] (.clk (ClkxCI), .d (\FFxDN[1][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[1][0] ));
  CDN_flop \FFxDP_reg[1][1] (.clk (ClkxCI), .d (\FFxDN[1][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[1][1] ));
  CDN_flop \FFxDP_reg[1][2] (.clk (ClkxCI), .d (\FFxDN[1][2] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[1][2] ));
  CDN_flop \FFxDP_reg[1][3] (.clk (ClkxCI), .d (\FFxDN[1][3] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[1][3] ));
  CDN_flop \FFxDP_reg[2][0] (.clk (ClkxCI), .d (\FFxDN[2][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[2][0] ));
  CDN_flop \FFxDP_reg[2][1] (.clk (ClkxCI), .d (\FFxDN[2][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[2][1] ));
  CDN_flop \FFxDP_reg[2][2] (.clk (ClkxCI), .d (\FFxDN[2][2] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[2][2] ));
  CDN_flop \FFxDP_reg[2][3] (.clk (ClkxCI), .d (\FFxDN[2][3] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[2][3] ));
  CDN_flop \FFxDP_reg[3][0] (.clk (ClkxCI), .d (\FFxDN[3][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[3][0] ));
  CDN_flop \FFxDP_reg[3][1] (.clk (ClkxCI), .d (\FFxDN[3][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[3][1] ));
  CDN_flop \FFxDP_reg[3][2] (.clk (ClkxCI), .d (\FFxDN[3][2] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[3][2] ));
  CDN_flop \FFxDP_reg[3][3] (.clk (ClkxCI), .d (\FFxDN[3][3] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[3][3] ));
  xor g12 (\FFxDN[1][0] , \Xi_mul_Yj[1][0] , \ZxDI[0] [0]);
  xor g13 (\FFxDN[1][1] , \Xi_mul_Yj[1][1] , \ZxDI[0] [1]);
  xor g14 (\FFxDN[1][2] , \Xi_mul_Yj[1][2] , \ZxDI[0] [2]);
  xor g15 (\FFxDN[1][3] , \Xi_mul_Yj[1][3] , \ZxDI[0] [3]);
  xor g16 (\QxDO[0] [0], \FFxDP[0][0] , \FFxDP[1][0] );
  xor g17 (\QxDO[0] [1], \FFxDP[0][1] , \FFxDP[1][1] );
  xor g18 (\QxDO[0] [2], \FFxDP[0][2] , \FFxDP[1][2] );
  xor g19 (\QxDO[0] [3], \FFxDP[0][3] , \FFxDP[1][3] );
  xor g20 (\FFxDN[2][0] , \Xi_mul_Yj[2][0] , \ZxDI[0] [0]);
  xor g21 (\FFxDN[2][1] , \Xi_mul_Yj[2][1] , \ZxDI[0] [1]);
  xor g22 (\FFxDN[2][2] , \Xi_mul_Yj[2][2] , \ZxDI[0] [2]);
  xor g23 (\FFxDN[2][3] , \Xi_mul_Yj[2][3] , \ZxDI[0] [3]);
  xor g28 (\QxDO[1] [0], \FFxDP[2][0] , \FFxDP[3][0] );
  xor g29 (\QxDO[1] [1], \FFxDP[2][1] , \FFxDP[3][1] );
  xor g30 (\QxDO[1] [2], \FFxDP[2][2] , \FFxDP[3][2] );
  xor g31 (\QxDO[1] [3], \FFxDP[2][3] , \FFxDP[3][3] );
  not g33 (n_1, RstxBI);
endmodule

module gf2_mul_N2(AxDI, BxDI, QxDO);
  input [1:0] AxDI, BxDI;
  output [1:0] QxDO;
  xor g1 (n_3, AxDI[1], AxDI[0]);
  xor g2 (n_4, BxDI[1], BxDI[0]);
  and g3 (n_5, n_3, n_4);
  and g4 (n_6, AxDI[0], BxDI[0]);
  xor g5 (QxDO[0], n_5, n_6);
  and g9 (n_10, AxDI[1], BxDI[1]);
  xor g10 (QxDO[1], n_5, n_10);
endmodule

module bmux_6(ctl, in_0, in_1, z);
  input ctl;
  input [1:0] in_0, in_1;
  output [1:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module
     shared_mul_gf2_PIPELINED7955827_1_to_3_7_downto_0_SHARES2(ClkxCI,
     RstxBI, \XxDI[0] , \XxDI[1] , \YxDI[0] , \YxDI[1] , \ZxDI[0] ,
     \QxDO[0] , \QxDO[1] );
  input ClkxCI, RstxBI;
  input [1:0] \XxDI[0] , \XxDI[1] , \YxDI[0] , \YxDI[1] , \ZxDI[0] ;
  output [1:0] \QxDO[0] , \QxDO[1] ;
  gf2_mul_N2
       \gen_inner_multipliers_g[1].gen_outer_multipliers_g[1].gf2_mul
       (.AxDI (\XxDI[1] ), .BxDI (\YxDI[1] ), .QxDO ({\FFxDN[3][1] ,
       \FFxDN[3][0] }));
  gf2_mul_N2
       \gen_inner_multipliers_g[1].gen_outer_multipliers_g[0].gf2_mul
       (.AxDI (\XxDI[1] ), .BxDI (\YxDI[0] ), .QxDO ({\Xi_mul_Yj[2][1]
       , \Xi_mul_Yj[2][0] }));
  gf2_mul_N2
       \gen_inner_multipliers_g[0].gen_outer_multipliers_g[1].gf2_mul
       (.AxDI (\XxDI[0] ), .BxDI (\YxDI[1] ), .QxDO ({\Xi_mul_Yj[1][1]
       , \Xi_mul_Yj[1][0] }));
  gf2_mul_N2
       \gen_inner_multipliers_g[0].gen_outer_multipliers_g[0].gf2_mul
       (.AxDI (\XxDI[0] ), .BxDI (\YxDI[0] ), .QxDO ({\FFxDN[0][1] ,
       \FFxDN[0][0] }));
  bmux_6 \mux_FFxDP[3]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[3][1] ,
       \FFxDN[3][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_FFxDP[2]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[2][1] ,
       \FFxDN[2][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_FFxDP[1]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[1][1] ,
       \FFxDN[1][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_FFxDP[0]_72_15 (.ctl (n_1), .in_0 ({\FFxDN[0][1] ,
       \FFxDN[0][0] }), .in_1 (2'b00), .z ());
  CDN_flop \FFxDP_reg[0][0] (.clk (ClkxCI), .d (\FFxDN[0][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[0][0] ));
  CDN_flop \FFxDP_reg[0][1] (.clk (ClkxCI), .d (\FFxDN[0][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[0][1] ));
  CDN_flop \FFxDP_reg[1][0] (.clk (ClkxCI), .d (\FFxDN[1][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[1][0] ));
  CDN_flop \FFxDP_reg[1][1] (.clk (ClkxCI), .d (\FFxDN[1][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[1][1] ));
  CDN_flop \FFxDP_reg[2][0] (.clk (ClkxCI), .d (\FFxDN[2][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[2][0] ));
  CDN_flop \FFxDP_reg[2][1] (.clk (ClkxCI), .d (\FFxDN[2][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[2][1] ));
  CDN_flop \FFxDP_reg[3][0] (.clk (ClkxCI), .d (\FFxDN[3][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[3][0] ));
  CDN_flop \FFxDP_reg[3][1] (.clk (ClkxCI), .d (\FFxDN[3][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\FFxDP[3][1] ));
  xor g12 (\FFxDN[1][0] , \Xi_mul_Yj[1][0] , \ZxDI[0] [0]);
  xor g13 (\FFxDN[1][1] , \Xi_mul_Yj[1][1] , \ZxDI[0] [1]);
  xor g14 (\QxDO[0] [0], \FFxDP[0][0] , \FFxDP[1][0] );
  xor g15 (\QxDO[0] [1], \FFxDP[0][1] , \FFxDP[1][1] );
  xor g16 (\FFxDN[2][0] , \Xi_mul_Yj[2][0] , \ZxDI[0] [0]);
  xor g17 (\FFxDN[2][1] , \Xi_mul_Yj[2][1] , \ZxDI[0] [1]);
  xor g20 (\QxDO[1] [0], \FFxDP[2][0] , \FFxDP[3][0] );
  xor g21 (\QxDO[1] [1], \FFxDP[2][1] , \FFxDP[3][1] );
  not g23 (n_1, RstxBI);
endmodule

module
     inverter_VARIANTx4d61736b6564_1_to_6_7_downto_0_PIPELINED7955827_1_to_3_7_downto_0_EIGHT_STAGED_SBOX7955827_1_to_3_7_downto_0_SHARES2(ClkxCI,
     RstxBI, \XxDI[0] , \XxDI[1] , \Zmul1xDI[0] , \Zmul2xDI[0] ,
     \Zmul3xDI[0] , \Bmul1xDI[0] , \Bmul1xDI[1] , \Bmul2xDI[0] ,
     \Bmul2xDI[1] , \Bmul3xDI[0] , \Bmul3xDI[1] , \QxDO[0] , \QxDO[1] );
  input ClkxCI, RstxBI;
  input [3:0] \XxDI[0] , \XxDI[1] ;
  input [1:0] \Zmul1xDI[0] , \Zmul2xDI[0] , \Zmul3xDI[0] , \Bmul1xDI[0]
       , \Bmul1xDI[1] , \Bmul2xDI[0] , \Bmul2xDI[1] , \Bmul3xDI[0] ,
       \Bmul3xDI[1] ;
  output [3:0] \QxDO[0] , \QxDO[1] ;
  shared_mul_gf2_PIPELINED7955827_1_to_3_7_downto_0_SHARES2
       a_mul_b(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       (\XxDI[0] [3:2]), .\XxDI[1]  (\XxDI[1] [3:2]), .\YxDI[0] 
       (\XxDI[0] [1:0]), .\YxDI[1]  (\XxDI[1] [1:0]), .\ZxDI[0] 
       (\Zmul1xDI[0] ), .\QxDO[0]  ({\AmulBxD[0][1] , \AmulBxD[0][0]
       }), .\QxDO[1]  ({\AmulBxD[1][1] , \AmulBxD[1][0] }));
  shared_mul_gf2_PIPELINED7955827_1_to_3_7_downto_0_SHARES2
       a_mul_e(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       ({\pipelinedAxDP[0][1] , \pipelinedAxDP[0][0] }), .\XxDI[1] 
       ({\pipelinedAxDP[1][1] , \pipelinedAxDP[1][0] }), .\YxDI[0] 
       ({\ExDP[0][1] , \ExDP[0][0] }), .\YxDI[1]  ({\ExDP[1][1] ,
       \ExDP[1][0] }), .\ZxDI[0]  (\Zmul2xDI[0] ), .\QxDO[0] 
       (\QxDO[0] [1:0]), .\QxDO[1]  (\QxDO[1] [1:0]));
  shared_mul_gf2_PIPELINED7955827_1_to_3_7_downto_0_SHARES2
       b_mul_e(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       ({\pipelinedBxDP[0][1] , \pipelinedBxDP[0][0] }), .\XxDI[1] 
       ({\pipelinedBxDP[1][1] , \pipelinedBxDP[1][0] }), .\YxDI[0] 
       ({\ExDP[0][1] , \ExDP[0][0] }), .\YxDI[1]  ({\ExDP[1][1] ,
       \ExDP[1][0] }), .\ZxDI[0]  (\Zmul3xDI[0] ), .\QxDO[0] 
       (\QxDO[0] [3:2]), .\QxDO[1]  (\QxDO[1] [3:2]));
  bmux_6 \mux_CxDP[1]_84_19 (.ctl (n_1), .in_0 ({\d[1] , \CxD[1][0] }),
       .in_1 (2'b00), .z ());
  bmux_6 \mux_ExDP[1]_84_19 (.ctl (n_1), .in_0 ({\ExD[1][1] ,
       \ExD[1][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_CxDP[0]_84_19 (.ctl (n_1), .in_0 ({\d[0] , \CxD[0][0] }),
       .in_1 (2'b00), .z ());
  bmux_6 \mux_ExDP[0]_84_19 (.ctl (n_1), .in_0 ({\ExD[0][1] ,
       \ExD[0][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_BxDP[1]_84_19 (.ctl (n_1), .in_0 (\XxDI[1] [1:0]), .in_1
       (2'b00), .z ());
  bmux_6 \mux_pipelinedBxDP[1]_84_19 (.ctl (n_1), .in_0 ({\BxDP[1][1] ,
       \BxDP[1][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_BxDP[0]_84_19 (.ctl (n_1), .in_0 (\XxDI[0] [1:0]), .in_1
       (2'b00), .z ());
  bmux_6 \mux_pipelinedBxDP[0]_84_19 (.ctl (n_1), .in_0 ({\BxDP[0][1] ,
       \BxDP[0][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_AxDP[1]_84_19 (.ctl (n_1), .in_0 (\XxDI[1] [3:2]), .in_1
       (2'b00), .z ());
  bmux_6 \mux_pipelinedAxDP[1]_84_19 (.ctl (n_1), .in_0 ({\AxDP[1][1] ,
       \AxDP[1][0] }), .in_1 (2'b00), .z ());
  bmux_6 \mux_AxDP[0]_84_19 (.ctl (n_1), .in_0 (\XxDI[0] [3:2]), .in_1
       (2'b00), .z ());
  bmux_6 \mux_pipelinedAxDP[0]_84_19 (.ctl (n_1), .in_0 ({\AxDP[0][1] ,
       \AxDP[0][0] }), .in_1 (2'b00), .z ());
  xor g13 (\d[0] , \XxDI[0] [3], \XxDI[0] [1]);
  xor g14 (\d[0]_12 , \XxDI[0] [2], \XxDI[0] [0]);
  xor g15 (\CxD[0][0] , \d[0]_12 , \d[0] );
  xor g16 (\ExD[0][0] , \CxDP[0][1] , \AmulBxD[0][1] );
  xor g17 (\ExD[0][1] , \CxDP[0][0] , \AmulBxD[0][0] );
  xor g18 (\d[1] , \XxDI[1] [3], \XxDI[1] [1]);
  xor g19 (\d[1]_13 , \XxDI[1] [2], \XxDI[1] [0]);
  xor g20 (\CxD[1][0] , \d[1]_13 , \d[1] );
  xor g21 (\ExD[1][0] , \CxDP[1][1] , \AmulBxD[1][1] );
  xor g22 (\ExD[1][1] , \CxDP[1][0] , \AmulBxD[1][0] );
  CDN_flop \AxDP_reg[0][0] (.clk (ClkxCI), .d (\XxDI[0] [2]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\AxDP[0][0] ));
  CDN_flop \AxDP_reg[0][1] (.clk (ClkxCI), .d (\XxDI[0] [3]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\AxDP[0][1] ));
  CDN_flop \AxDP_reg[1][0] (.clk (ClkxCI), .d (\XxDI[1] [2]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\AxDP[1][0] ));
  CDN_flop \AxDP_reg[1][1] (.clk (ClkxCI), .d (\XxDI[1] [3]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\AxDP[1][1] ));
  CDN_flop \BxDP_reg[0][0] (.clk (ClkxCI), .d (\XxDI[0] [0]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\BxDP[0][0] ));
  CDN_flop \BxDP_reg[0][1] (.clk (ClkxCI), .d (\XxDI[0] [1]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\BxDP[0][1] ));
  CDN_flop \BxDP_reg[1][0] (.clk (ClkxCI), .d (\XxDI[1] [0]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\BxDP[1][0] ));
  CDN_flop \BxDP_reg[1][1] (.clk (ClkxCI), .d (\XxDI[1] [1]), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\BxDP[1][1] ));
  CDN_flop \CxDP_reg[0][0] (.clk (ClkxCI), .d (\CxD[0][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\CxDP[0][0] ));
  CDN_flop \CxDP_reg[0][1] (.clk (ClkxCI), .d (\d[0] ), .sena (1'b1),
       .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\CxDP[0][1] ));
  CDN_flop \CxDP_reg[1][0] (.clk (ClkxCI), .d (\CxD[1][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\CxDP[1][0] ));
  CDN_flop \CxDP_reg[1][1] (.clk (ClkxCI), .d (\d[1] ), .sena (1'b1),
       .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\CxDP[1][1] ));
  CDN_flop \pipelinedAxDP_reg[0][0] (.clk (ClkxCI), .d (\AxDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedAxDP[0][0] ));
  CDN_flop \pipelinedAxDP_reg[0][1] (.clk (ClkxCI), .d (\AxDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedAxDP[0][1] ));
  CDN_flop \pipelinedAxDP_reg[1][0] (.clk (ClkxCI), .d (\AxDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedAxDP[1][0] ));
  CDN_flop \pipelinedAxDP_reg[1][1] (.clk (ClkxCI), .d (\AxDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedAxDP[1][1] ));
  CDN_flop \pipelinedBxDP_reg[0][0] (.clk (ClkxCI), .d (\BxDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedBxDP[0][0] ));
  CDN_flop \pipelinedBxDP_reg[0][1] (.clk (ClkxCI), .d (\BxDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedBxDP[0][1] ));
  CDN_flop \pipelinedBxDP_reg[1][0] (.clk (ClkxCI), .d (\BxDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedBxDP[1][0] ));
  CDN_flop \pipelinedBxDP_reg[1][1] (.clk (ClkxCI), .d (\BxDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\pipelinedBxDP[1][1] ));
  CDN_flop \ExDP_reg[0][0] (.clk (ClkxCI), .d (\ExD[0][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\ExDP[0][0] ));
  CDN_flop \ExDP_reg[0][1] (.clk (ClkxCI), .d (\ExD[0][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\ExDP[0][1] ));
  CDN_flop \ExDP_reg[1][0] (.clk (ClkxCI), .d (\ExD[1][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\ExDP[1][0] ));
  CDN_flop \ExDP_reg[1][1] (.clk (ClkxCI), .d (\ExD[1][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\ExDP[1][1] ));
  not g24 (n_1, RstxBI);
endmodule

module bmux_26(ctl, in_0, in_1, z);
  input ctl;
  input [7:0] in_0, in_1;
  output [7:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module aes_sbox(ClkxCI, RstxBI, \XxDI[0] , \XxDI[1] , \Zmul1xDI[0] ,
     \Zmul2xDI[0] , \Zmul3xDI[0] , \Zinv1xDI[0] , \Zinv2xDI[0] ,
     \Zinv3xDI[0] , \Bmul1xDI[0] , \Bmul1xDI[1] , \Binv1xDI[0] ,
     \Binv1xDI[1] , \Binv2xDI[0] , \Binv2xDI[1] , \Binv3xDI[0] ,
     \Binv3xDI[1] , \QxDO[0] , \QxDO[1] );
  input ClkxCI, RstxBI;
  input [7:0] \XxDI[0] , \XxDI[1] ;
  input [3:0] \Zmul1xDI[0] , \Zmul2xDI[0] , \Zmul3xDI[0] , \Bmul1xDI[0]
       , \Bmul1xDI[1] ;
  input [1:0] \Zinv1xDI[0] , \Zinv2xDI[0] , \Zinv3xDI[0] , \Binv1xDI[0]
       , \Binv1xDI[1] , \Binv2xDI[0] , \Binv2xDI[1] , \Binv3xDI[0] ,
       \Binv3xDI[1] ;
  output [7:0] \QxDO[0] , \QxDO[1] ;
  lin_map_MATRIX_SEL1482566961_1_to_4_7_downto_0
       \generate_instances_g[1].input_mapping (.DataInxDI (\XxDI[1] ),
       .DataOutxDO ({\mappedxD[1][7] , \mappedxD[1][6] ,
       \mappedxD[1][5] , \mappedxD[1][4] , \mappedxD[1][3] ,
       \mappedxD[1][2] , \mappedxD[1][1] , \mappedxD[1][0] }));
  square_scaler \generate_instances_g[1].square_scaler_gf24 (.DataInxDI
       ({\Y0xorY1xD[1][3] , \Y0xorY1xD[1][2] , \Y0xorY1xD[1][1] ,
       \Y0xorY1xD[1][0] }), .DataOutxDO ({\Y0xorY12xD[1][3] ,
       \Y0xorY12xD[1][2] , \Y0xorY12xD[1][1] , \Y0xorY12xD[1][0] }));
  lin_map_MATRIX_SEL19800_1_to_2_7_downto_0
       \generate_instances_g[1].output_mapping (.DataInxDI
       ({\InvUnmappedxD[1][7] , \InvUnmappedxD[1][6] ,
       \InvUnmappedxD[1][5] , \InvUnmappedxD[1][4] ,
       \InvUnmappedxD[1][3] , \InvUnmappedxD[1][2] ,
       \InvUnmappedxD[1][1] , \InvUnmappedxD[1][0] }), .DataOutxDO
       (\QxDO[1] ));
  lin_map_MATRIX_SEL1482566961_1_to_4_7_downto_0
       \generate_instances_g[0].input_mapping (.DataInxDI (\XxDI[0] ),
       .DataOutxDO ({\mappedxD[0][7] , \mappedxD[0][6] ,
       \mappedxD[0][5] , \mappedxD[0][4] , \mappedxD[0][3] ,
       \mappedxD[0][2] , \mappedxD[0][1] , \mappedxD[0][0] }));
  square_scaler \generate_instances_g[0].square_scaler_gf24 (.DataInxDI
       ({\Y0xorY1xD[0][3] , \Y0xorY1xD[0][2] , \Y0xorY1xD[0][1] ,
       \Y0xorY1xD[0][0] }), .DataOutxDO ({\Y0xorY12xD[0][3] ,
       \Y0xorY12xD[0][2] , \Y0xorY12xD[0][1] , \Y0xorY12xD[0][0] }));
  lin_map_MATRIX_SEL19800_1_to_2_7_downto_0
       \generate_instances_g[0].output_mapping (.DataInxDI
       ({\InvUnmappedxD[0][7] , \InvUnmappedxD[0][6] ,
       \InvUnmappedxD[0][5] , \InvUnmappedxD[0][4] ,
       \InvUnmappedxD[0][3] , \InvUnmappedxD[0][2] ,
       \InvUnmappedxD[0][1] , \InvUnmappedxD[0][0] }), .DataOutxDO
       ({\QxDO[0] [7], \InvMappedxD[0][6] , \InvMappedxD[0][5] ,
       \QxDO[0] [4:2], \InvMappedxD[0][1] , \InvMappedxD[0][0] }));
  shared_mul_gf4_PIPELINED7955827_1_to_3_7_downto_0_SHARES2
       mul_y0y1(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       ({\Y1xD[0][7] , \Y1xD[0][6] , \Y1xD[0][5] , \Y1xD[0][4] }),
       .\XxDI[1]  ({\Y1xD[1][7] , \Y1xD[1][6] , \Y1xD[1][5] ,
       \Y1xD[1][4] }), .\YxDI[0]  ({\Y0xD[0][3] , \Y0xD[0][2] ,
       \Y0xD[0][1] , \Y0xD[0][0] }), .\YxDI[1]  ({\Y0xD[1][3] ,
       \Y0xD[1][2] , \Y0xD[1][1] , \Y0xD[1][0] }), .\ZxDI[0] 
       (\Zmul1xDI[0] ), .\QxDO[0]  ({\Y0mulY1xD[0][3] ,
       \Y0mulY1xD[0][2] , \Y0mulY1xD[0][1] , \Y0mulY1xD[0][0] }),
       .\QxDO[1]  ({\Y0mulY1xD[1][3] , \Y0mulY1xD[1][2] ,
       \Y0mulY1xD[1][1] , \Y0mulY1xD[1][0] }));
  inverter_VARIANTx4d61736b6564_1_to_6_7_downto_0_PIPELINED7955827_1_to_3_7_downto_0_EIGHT_STAGED_SBOX7955827_1_to_3_7_downto_0_SHARES2
       inverter_gf24(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       ({\InverterInxDP[0][3] , \InverterInxDP[0][2] ,
       \InverterInxDP[0][1] , \InverterInxDP[0][0] }), .\XxDI[1] 
       ({\InverterInxDP[1][3] , \InverterInxDP[1][2] ,
       \InverterInxDP[1][1] , \InverterInxDP[1][0] }), .\Zmul1xDI[0] 
       (\Zinv1xDI[0] ), .\Zmul2xDI[0]  (\Zinv2xDI[0] ), .\Zmul3xDI[0] 
       (\Zinv3xDI[0] ), .\Bmul1xDI[0]  (\Binv1xDI[0] ), .\Bmul1xDI[1] 
       (\Binv1xDI[1] ), .\Bmul2xDI[0]  (\Binv2xDI[0] ), .\Bmul2xDI[1] 
       (\Binv2xDI[1] ), .\Bmul3xDI[0]  (\Binv3xDI[0] ), .\Bmul3xDI[1] 
       (\Binv3xDI[1] ), .\QxDO[0]  ({\InverterOutxD[0][3] ,
       \InverterOutxD[0][2] , \InverterOutxD[0][1] ,
       \InverterOutxD[0][0] }), .\QxDO[1]  ({\InverterOutxD[1][3] ,
       \InverterOutxD[1][2] , \InverterOutxD[1][1] ,
       \InverterOutxD[1][0] }));
  shared_mul_gf4_PIPELINED7955827_1_to_3_7_downto_0_SHARES2
       mult_msb(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       ({\InverterOutxD[0][3] , \InverterOutxD[0][2] ,
       \InverterOutxD[0][1] , \InverterOutxD[0][0] }), .\XxDI[1] 
       ({\InverterOutxD[1][3] , \InverterOutxD[1][2] ,
       \InverterOutxD[1][1] , \InverterOutxD[1][0] }), .\YxDI[0] 
       ({\Y0_4xDP[0][3] , \Y0_4xDP[0][2] , \Y0_4xDP[0][1] ,
       \Y0_4xDP[0][0] }), .\YxDI[1]  ({\Y0_4xDP[1][3] , \Y0_4xDP[1][2]
       , \Y0_4xDP[1][1] , \Y0_4xDP[1][0] }), .\ZxDI[0]  (\Zmul2xDI[0]
       ), .\QxDO[0]  ({\InvUnmappedxD[0][7] , \InvUnmappedxD[0][6] ,
       \InvUnmappedxD[0][5] , \InvUnmappedxD[0][4] }), .\QxDO[1] 
       ({\InvUnmappedxD[1][7] , \InvUnmappedxD[1][6] ,
       \InvUnmappedxD[1][5] , \InvUnmappedxD[1][4] }));
  shared_mul_gf4_PIPELINED7955827_1_to_3_7_downto_0_SHARES2
       mult_lsb(.ClkxCI (ClkxCI), .RstxBI (RstxBI), .\XxDI[0] 
       ({\InverterOutxD[0][3] , \InverterOutxD[0][2] ,
       \InverterOutxD[0][1] , \InverterOutxD[0][0] }), .\XxDI[1] 
       ({\InverterOutxD[1][3] , \InverterOutxD[1][2] ,
       \InverterOutxD[1][1] , \InverterOutxD[1][0] }), .\YxDI[0] 
       ({\Y1_4xDP[0][3] , \Y1_4xDP[0][2] , \Y1_4xDP[0][1] ,
       \Y1_4xDP[0][0] }), .\YxDI[1]  ({\Y1_4xDP[1][3] , \Y1_4xDP[1][2]
       , \Y1_4xDP[1][1] , \Y1_4xDP[1][0] }), .\ZxDI[0]  (\Zmul3xDI[0]
       ), .\QxDO[0]  ({\InvUnmappedxD[0][3] , \InvUnmappedxD[0][2] ,
       \InvUnmappedxD[0][1] , \InvUnmappedxD[0][0] }), .\QxDO[1] 
       ({\InvUnmappedxD[1][3] , \InvUnmappedxD[1][2] ,
       \InvUnmappedxD[1][1] , \InvUnmappedxD[1][0] }));
  bmux_26 \mux_mappedxDP[1]_99_17 (.ctl (n_1), .in_0 ({\mappedxD[1][7]
       , \mappedxD[1][6] , \mappedxD[1][5] , \mappedxD[1][4] ,
       \mappedxD[1][3] , \mappedxD[1][2] , \mappedxD[1][1] ,
       \mappedxD[1][0] }), .in_1 (8'b00000000), .z ());
  bmux_26 \mux_mappedxDP[0]_99_17 (.ctl (n_1), .in_0 ({\mappedxD[0][7]
       , \mappedxD[0][6] , \mappedxD[0][5] , \mappedxD[0][4] ,
       \mappedxD[0][3] , \mappedxD[0][2] , \mappedxD[0][1] ,
       \mappedxD[0][0] }), .in_1 (8'b00000000), .z ());
  bmux \mux_Y1_0xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y1xD[1][7] ,
       \Y1xD[1][6] , \Y1xD[1][5] , \Y1xD[1][4] }), .in_1 (4'b0000), .z
       ());
  bmux \mux_Y1_1xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y1_0xDP[1][3] ,
       \Y1_0xDP[1][2] , \Y1_0xDP[1][1] , \Y1_0xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_2xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y1_1xDP[1][3] ,
       \Y1_1xDP[1][2] , \Y1_1xDP[1][1] , \Y1_1xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_3xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y1_2xDP[1][3] ,
       \Y1_2xDP[1][2] , \Y1_2xDP[1][1] , \Y1_2xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_4xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y1_3xDP[1][3] ,
       \Y1_3xDP[1][2] , \Y1_3xDP[1][1] , \Y1_3xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_0xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y1xD[0][7] ,
       \Y1xD[0][6] , \Y1xD[0][5] , \Y1xD[0][4] }), .in_1 (4'b0000), .z
       ());
  bmux \mux_Y1_1xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y1_0xDP[0][3] ,
       \Y1_0xDP[0][2] , \Y1_0xDP[0][1] , \Y1_0xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_2xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y1_1xDP[0][3] ,
       \Y1_1xDP[0][2] , \Y1_1xDP[0][1] , \Y1_1xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_3xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y1_2xDP[0][3] ,
       \Y1_2xDP[0][2] , \Y1_2xDP[0][1] , \Y1_2xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y1_4xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y1_3xDP[0][3] ,
       \Y1_3xDP[0][2] , \Y1_3xDP[0][1] , \Y1_3xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_0xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y0xD[1][3] ,
       \Y0xD[1][2] , \Y0xD[1][1] , \Y0xD[1][0] }), .in_1 (4'b0000), .z
       ());
  bmux \mux_Y0_1xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y0_0xDP[1][3] ,
       \Y0_0xDP[1][2] , \Y0_0xDP[1][1] , \Y0_0xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_2xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y0_1xDP[1][3] ,
       \Y0_1xDP[1][2] , \Y0_1xDP[1][1] , \Y0_1xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_3xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y0_2xDP[1][3] ,
       \Y0_2xDP[1][2] , \Y0_2xDP[1][1] , \Y0_2xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_4xDP[1]_115_17 (.ctl (n_1), .in_0 ({\Y0_3xDP[1][3] ,
       \Y0_3xDP[1][2] , \Y0_3xDP[1][1] , \Y0_3xDP[1][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_0xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y0xD[0][3] ,
       \Y0xD[0][2] , \Y0xD[0][1] , \Y0xD[0][0] }), .in_1 (4'b0000), .z
       ());
  bmux \mux_Y0_1xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y0_0xDP[0][3] ,
       \Y0_0xDP[0][2] , \Y0_0xDP[0][1] , \Y0_0xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_2xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y0_1xDP[0][3] ,
       \Y0_1xDP[0][2] , \Y0_1xDP[0][1] , \Y0_1xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_3xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y0_2xDP[0][3] ,
       \Y0_2xDP[0][2] , \Y0_2xDP[0][1] , \Y0_2xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_Y0_4xDP[0]_115_17 (.ctl (n_1), .in_0 ({\Y0_3xDP[0][3] ,
       \Y0_3xDP[0][2] , \Y0_3xDP[0][1] , \Y0_3xDP[0][0] }), .in_1
       (4'b0000), .z ());
  bmux \mux_InverterInxDP[1]_99_17 (.ctl (n_1), .in_0
       ({\InverterInxD[1][3] , \InverterInxD[1][2] ,
       \InverterInxD[1][1] , \InverterInxD[1][0] }), .in_1 (4'b0000),
       .z ());
  bmux \mux_InverterInxDP[0]_99_17 (.ctl (n_1), .in_0
       ({\InverterInxD[0][3] , \InverterInxD[0][2] ,
       \InverterInxD[0][1] , \InverterInxD[0][0] }), .in_1 (4'b0000),
       .z ());
  CDN_flop \mappedxDP_reg[0][0] (.clk (ClkxCI), .d (\mappedxD[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[0][0] ));
  CDN_flop \mappedxDP_reg[0][1] (.clk (ClkxCI), .d (\mappedxD[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[0][1] ));
  CDN_flop \mappedxDP_reg[0][2] (.clk (ClkxCI), .d (\mappedxD[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[0][2] ));
  CDN_flop \mappedxDP_reg[0][3] (.clk (ClkxCI), .d (\mappedxD[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[0][3] ));
  CDN_flop \mappedxDP_reg[0][4] (.clk (ClkxCI), .d (\mappedxD[0][4] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[0][4] ));
  CDN_flop \mappedxDP_reg[0][5] (.clk (ClkxCI), .d (\mappedxD[0][5] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[0][5] ));
  CDN_flop \mappedxDP_reg[0][6] (.clk (ClkxCI), .d (\mappedxD[0][6] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[0][6] ));
  CDN_flop \mappedxDP_reg[0][7] (.clk (ClkxCI), .d (\mappedxD[0][7] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[0][7] ));
  CDN_flop \mappedxDP_reg[1][0] (.clk (ClkxCI), .d (\mappedxD[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[1][0] ));
  CDN_flop \mappedxDP_reg[1][1] (.clk (ClkxCI), .d (\mappedxD[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[1][1] ));
  CDN_flop \mappedxDP_reg[1][2] (.clk (ClkxCI), .d (\mappedxD[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[1][2] ));
  CDN_flop \mappedxDP_reg[1][3] (.clk (ClkxCI), .d (\mappedxD[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xD[1][3] ));
  CDN_flop \mappedxDP_reg[1][4] (.clk (ClkxCI), .d (\mappedxD[1][4] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[1][4] ));
  CDN_flop \mappedxDP_reg[1][5] (.clk (ClkxCI), .d (\mappedxD[1][5] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[1][5] ));
  CDN_flop \mappedxDP_reg[1][6] (.clk (ClkxCI), .d (\mappedxD[1][6] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[1][6] ));
  CDN_flop \mappedxDP_reg[1][7] (.clk (ClkxCI), .d (\mappedxD[1][7] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1xD[1][7] ));
  CDN_flop \InverterInxDP_reg[0][0] (.clk (ClkxCI), .d
       (\InverterInxD[0][0] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[0][0] ));
  CDN_flop \InverterInxDP_reg[0][1] (.clk (ClkxCI), .d
       (\InverterInxD[0][1] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[0][1] ));
  CDN_flop \InverterInxDP_reg[0][2] (.clk (ClkxCI), .d
       (\InverterInxD[0][2] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[0][2] ));
  CDN_flop \InverterInxDP_reg[0][3] (.clk (ClkxCI), .d
       (\InverterInxD[0][3] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[0][3] ));
  CDN_flop \InverterInxDP_reg[1][0] (.clk (ClkxCI), .d
       (\InverterInxD[1][0] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[1][0] ));
  CDN_flop \InverterInxDP_reg[1][1] (.clk (ClkxCI), .d
       (\InverterInxD[1][1] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[1][1] ));
  CDN_flop \InverterInxDP_reg[1][2] (.clk (ClkxCI), .d
       (\InverterInxD[1][2] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[1][2] ));
  CDN_flop \InverterInxDP_reg[1][3] (.clk (ClkxCI), .d
       (\InverterInxD[1][3] ), .sena (1'b1), .aclr (n_1), .apre (1'b0),
       .srl (1'b0), .srd (1'b0), .q (\InverterInxDP[1][3] ));
  CDN_flop \Y0_0xDP_reg[0][0] (.clk (ClkxCI), .d (\Y0xD[0][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[0][0] ));
  CDN_flop \Y0_0xDP_reg[0][1] (.clk (ClkxCI), .d (\Y0xD[0][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[0][1] ));
  CDN_flop \Y0_0xDP_reg[0][2] (.clk (ClkxCI), .d (\Y0xD[0][2] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[0][2] ));
  CDN_flop \Y0_0xDP_reg[0][3] (.clk (ClkxCI), .d (\Y0xD[0][3] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[0][3] ));
  CDN_flop \Y0_0xDP_reg[1][0] (.clk (ClkxCI), .d (\Y0xD[1][0] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[1][0] ));
  CDN_flop \Y0_0xDP_reg[1][1] (.clk (ClkxCI), .d (\Y0xD[1][1] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[1][1] ));
  CDN_flop \Y0_0xDP_reg[1][2] (.clk (ClkxCI), .d (\Y0xD[1][2] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[1][2] ));
  CDN_flop \Y0_0xDP_reg[1][3] (.clk (ClkxCI), .d (\Y0xD[1][3] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y0_0xDP[1][3] ));
  CDN_flop \Y0_1xDP_reg[0][0] (.clk (ClkxCI), .d (\Y0_0xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[0][0] ));
  CDN_flop \Y0_1xDP_reg[0][1] (.clk (ClkxCI), .d (\Y0_0xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[0][1] ));
  CDN_flop \Y0_1xDP_reg[0][2] (.clk (ClkxCI), .d (\Y0_0xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[0][2] ));
  CDN_flop \Y0_1xDP_reg[0][3] (.clk (ClkxCI), .d (\Y0_0xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[0][3] ));
  CDN_flop \Y0_1xDP_reg[1][0] (.clk (ClkxCI), .d (\Y0_0xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[1][0] ));
  CDN_flop \Y0_1xDP_reg[1][1] (.clk (ClkxCI), .d (\Y0_0xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[1][1] ));
  CDN_flop \Y0_1xDP_reg[1][2] (.clk (ClkxCI), .d (\Y0_0xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[1][2] ));
  CDN_flop \Y0_1xDP_reg[1][3] (.clk (ClkxCI), .d (\Y0_0xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_1xDP[1][3] ));
  CDN_flop \Y0_2xDP_reg[0][0] (.clk (ClkxCI), .d (\Y0_1xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[0][0] ));
  CDN_flop \Y0_2xDP_reg[0][1] (.clk (ClkxCI), .d (\Y0_1xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[0][1] ));
  CDN_flop \Y0_2xDP_reg[0][2] (.clk (ClkxCI), .d (\Y0_1xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[0][2] ));
  CDN_flop \Y0_2xDP_reg[0][3] (.clk (ClkxCI), .d (\Y0_1xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[0][3] ));
  CDN_flop \Y0_2xDP_reg[1][0] (.clk (ClkxCI), .d (\Y0_1xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[1][0] ));
  CDN_flop \Y0_2xDP_reg[1][1] (.clk (ClkxCI), .d (\Y0_1xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[1][1] ));
  CDN_flop \Y0_2xDP_reg[1][2] (.clk (ClkxCI), .d (\Y0_1xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[1][2] ));
  CDN_flop \Y0_2xDP_reg[1][3] (.clk (ClkxCI), .d (\Y0_1xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_2xDP[1][3] ));
  CDN_flop \Y0_3xDP_reg[0][0] (.clk (ClkxCI), .d (\Y0_2xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[0][0] ));
  CDN_flop \Y0_3xDP_reg[0][1] (.clk (ClkxCI), .d (\Y0_2xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[0][1] ));
  CDN_flop \Y0_3xDP_reg[0][2] (.clk (ClkxCI), .d (\Y0_2xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[0][2] ));
  CDN_flop \Y0_3xDP_reg[0][3] (.clk (ClkxCI), .d (\Y0_2xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[0][3] ));
  CDN_flop \Y0_3xDP_reg[1][0] (.clk (ClkxCI), .d (\Y0_2xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[1][0] ));
  CDN_flop \Y0_3xDP_reg[1][1] (.clk (ClkxCI), .d (\Y0_2xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[1][1] ));
  CDN_flop \Y0_3xDP_reg[1][2] (.clk (ClkxCI), .d (\Y0_2xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[1][2] ));
  CDN_flop \Y0_3xDP_reg[1][3] (.clk (ClkxCI), .d (\Y0_2xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_3xDP[1][3] ));
  CDN_flop \Y0_4xDP_reg[0][0] (.clk (ClkxCI), .d (\Y0_3xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[0][0] ));
  CDN_flop \Y0_4xDP_reg[0][1] (.clk (ClkxCI), .d (\Y0_3xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[0][1] ));
  CDN_flop \Y0_4xDP_reg[0][2] (.clk (ClkxCI), .d (\Y0_3xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[0][2] ));
  CDN_flop \Y0_4xDP_reg[0][3] (.clk (ClkxCI), .d (\Y0_3xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[0][3] ));
  CDN_flop \Y0_4xDP_reg[1][0] (.clk (ClkxCI), .d (\Y0_3xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[1][0] ));
  CDN_flop \Y0_4xDP_reg[1][1] (.clk (ClkxCI), .d (\Y0_3xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[1][1] ));
  CDN_flop \Y0_4xDP_reg[1][2] (.clk (ClkxCI), .d (\Y0_3xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[1][2] ));
  CDN_flop \Y0_4xDP_reg[1][3] (.clk (ClkxCI), .d (\Y0_3xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0_4xDP[1][3] ));
  CDN_flop \Y1_0xDP_reg[0][0] (.clk (ClkxCI), .d (\Y1xD[0][4] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[0][0] ));
  CDN_flop \Y1_0xDP_reg[0][1] (.clk (ClkxCI), .d (\Y1xD[0][5] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[0][1] ));
  CDN_flop \Y1_0xDP_reg[0][2] (.clk (ClkxCI), .d (\Y1xD[0][6] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[0][2] ));
  CDN_flop \Y1_0xDP_reg[0][3] (.clk (ClkxCI), .d (\Y1xD[0][7] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[0][3] ));
  CDN_flop \Y1_0xDP_reg[1][0] (.clk (ClkxCI), .d (\Y1xD[1][4] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[1][0] ));
  CDN_flop \Y1_0xDP_reg[1][1] (.clk (ClkxCI), .d (\Y1xD[1][5] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[1][1] ));
  CDN_flop \Y1_0xDP_reg[1][2] (.clk (ClkxCI), .d (\Y1xD[1][6] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[1][2] ));
  CDN_flop \Y1_0xDP_reg[1][3] (.clk (ClkxCI), .d (\Y1xD[1][7] ), .sena
       (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\Y1_0xDP[1][3] ));
  CDN_flop \Y1_1xDP_reg[0][0] (.clk (ClkxCI), .d (\Y1_0xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[0][0] ));
  CDN_flop \Y1_1xDP_reg[0][1] (.clk (ClkxCI), .d (\Y1_0xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[0][1] ));
  CDN_flop \Y1_1xDP_reg[0][2] (.clk (ClkxCI), .d (\Y1_0xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[0][2] ));
  CDN_flop \Y1_1xDP_reg[0][3] (.clk (ClkxCI), .d (\Y1_0xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[0][3] ));
  CDN_flop \Y1_1xDP_reg[1][0] (.clk (ClkxCI), .d (\Y1_0xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[1][0] ));
  CDN_flop \Y1_1xDP_reg[1][1] (.clk (ClkxCI), .d (\Y1_0xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[1][1] ));
  CDN_flop \Y1_1xDP_reg[1][2] (.clk (ClkxCI), .d (\Y1_0xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[1][2] ));
  CDN_flop \Y1_1xDP_reg[1][3] (.clk (ClkxCI), .d (\Y1_0xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_1xDP[1][3] ));
  CDN_flop \Y1_2xDP_reg[0][0] (.clk (ClkxCI), .d (\Y1_1xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[0][0] ));
  CDN_flop \Y1_2xDP_reg[0][1] (.clk (ClkxCI), .d (\Y1_1xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[0][1] ));
  CDN_flop \Y1_2xDP_reg[0][2] (.clk (ClkxCI), .d (\Y1_1xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[0][2] ));
  CDN_flop \Y1_2xDP_reg[0][3] (.clk (ClkxCI), .d (\Y1_1xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[0][3] ));
  CDN_flop \Y1_2xDP_reg[1][0] (.clk (ClkxCI), .d (\Y1_1xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[1][0] ));
  CDN_flop \Y1_2xDP_reg[1][1] (.clk (ClkxCI), .d (\Y1_1xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[1][1] ));
  CDN_flop \Y1_2xDP_reg[1][2] (.clk (ClkxCI), .d (\Y1_1xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[1][2] ));
  CDN_flop \Y1_2xDP_reg[1][3] (.clk (ClkxCI), .d (\Y1_1xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_2xDP[1][3] ));
  CDN_flop \Y1_3xDP_reg[0][0] (.clk (ClkxCI), .d (\Y1_2xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[0][0] ));
  CDN_flop \Y1_3xDP_reg[0][1] (.clk (ClkxCI), .d (\Y1_2xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[0][1] ));
  CDN_flop \Y1_3xDP_reg[0][2] (.clk (ClkxCI), .d (\Y1_2xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[0][2] ));
  CDN_flop \Y1_3xDP_reg[0][3] (.clk (ClkxCI), .d (\Y1_2xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[0][3] ));
  CDN_flop \Y1_3xDP_reg[1][0] (.clk (ClkxCI), .d (\Y1_2xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[1][0] ));
  CDN_flop \Y1_3xDP_reg[1][1] (.clk (ClkxCI), .d (\Y1_2xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[1][1] ));
  CDN_flop \Y1_3xDP_reg[1][2] (.clk (ClkxCI), .d (\Y1_2xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[1][2] ));
  CDN_flop \Y1_3xDP_reg[1][3] (.clk (ClkxCI), .d (\Y1_2xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_3xDP[1][3] ));
  CDN_flop \Y1_4xDP_reg[0][0] (.clk (ClkxCI), .d (\Y1_3xDP[0][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[0][0] ));
  CDN_flop \Y1_4xDP_reg[0][1] (.clk (ClkxCI), .d (\Y1_3xDP[0][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[0][1] ));
  CDN_flop \Y1_4xDP_reg[0][2] (.clk (ClkxCI), .d (\Y1_3xDP[0][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[0][2] ));
  CDN_flop \Y1_4xDP_reg[0][3] (.clk (ClkxCI), .d (\Y1_3xDP[0][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[0][3] ));
  CDN_flop \Y1_4xDP_reg[1][0] (.clk (ClkxCI), .d (\Y1_3xDP[1][0] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[1][0] ));
  CDN_flop \Y1_4xDP_reg[1][1] (.clk (ClkxCI), .d (\Y1_3xDP[1][1] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[1][1] ));
  CDN_flop \Y1_4xDP_reg[1][2] (.clk (ClkxCI), .d (\Y1_3xDP[1][2] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[1][2] ));
  CDN_flop \Y1_4xDP_reg[1][3] (.clk (ClkxCI), .d (\Y1_3xDP[1][3] ),
       .sena (1'b1), .aclr (n_1), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y1_4xDP[1][3] ));
  CDN_flop \Y0xorY12xDP_reg[0][0] (.clk (ClkxCI), .d (\Y0xorY12xD[0][0]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[0][0] ));
  CDN_flop \Y0xorY12xDP_reg[0][1] (.clk (ClkxCI), .d (\Y0xorY12xD[0][1]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[0][1] ));
  CDN_flop \Y0xorY12xDP_reg[0][2] (.clk (ClkxCI), .d (\Y0xorY12xD[0][2]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[0][2] ));
  CDN_flop \Y0xorY12xDP_reg[0][3] (.clk (ClkxCI), .d (\Y0xorY12xD[0][3]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[0][3] ));
  CDN_flop \Y0xorY12xDP_reg[1][0] (.clk (ClkxCI), .d (\Y0xorY12xD[1][0]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[1][0] ));
  CDN_flop \Y0xorY12xDP_reg[1][1] (.clk (ClkxCI), .d (\Y0xorY12xD[1][1]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[1][1] ));
  CDN_flop \Y0xorY12xDP_reg[1][2] (.clk (ClkxCI), .d (\Y0xorY12xD[1][2]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[1][2] ));
  CDN_flop \Y0xorY12xDP_reg[1][3] (.clk (ClkxCI), .d (\Y0xorY12xD[1][3]
       ), .sena (RstxBI), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (\Y0xorY12xDP[1][3] ));
  xor g37 (\Y0xorY1xD[1][0] , \Y1xD[1][4] , \Y0xD[1][0] );
  xor g38 (\Y0xorY1xD[1][1] , \Y1xD[1][5] , \Y0xD[1][1] );
  xor g39 (\Y0xorY1xD[1][2] , \Y1xD[1][6] , \Y0xD[1][2] );
  xor g40 (\Y0xorY1xD[1][3] , \Y1xD[1][7] , \Y0xD[1][3] );
  xor g41 (\InverterInxD[1][0] , \Y0mulY1xD[1][0] , \Y0xorY12xDP[1][0]
       );
  xor g42 (\InverterInxD[1][1] , \Y0mulY1xD[1][1] , \Y0xorY12xDP[1][1]
       );
  xor g43 (\InverterInxD[1][2] , \Y0mulY1xD[1][2] , \Y0xorY12xDP[1][2]
       );
  xor g44 (\InverterInxD[1][3] , \Y0mulY1xD[1][3] , \Y0xorY12xDP[1][3]
       );
  xor g45 (\Y0xorY1xD[0][0] , \Y1xD[0][4] , \Y0xD[0][0] );
  xor g46 (\Y0xorY1xD[0][1] , \Y1xD[0][5] , \Y0xD[0][1] );
  xor g47 (\Y0xorY1xD[0][2] , \Y1xD[0][6] , \Y0xD[0][2] );
  xor g48 (\Y0xorY1xD[0][3] , \Y1xD[0][7] , \Y0xD[0][3] );
  xor g49 (\InverterInxD[0][0] , \Y0mulY1xD[0][0] , \Y0xorY12xDP[0][0]
       );
  xor g50 (\InverterInxD[0][1] , \Y0mulY1xD[0][1] , \Y0xorY12xDP[0][1]
       );
  xor g51 (\InverterInxD[0][2] , \Y0mulY1xD[0][2] , \Y0xorY12xDP[0][2]
       );
  xor g52 (\InverterInxD[0][3] , \Y0mulY1xD[0][3] , \Y0xorY12xDP[0][3]
       );
  not g58 (n_1, RstxBI);
  not g59 (\QxDO[0] [0], \InvMappedxD[0][0] );
  not g60 (\QxDO[0] [1], \InvMappedxD[0][1] );
  not g61 (\QxDO[0] [5], \InvMappedxD[0][5] );
  not g62 (\QxDO[0] [6], \InvMappedxD[0][6] );
endmodule

//`ifdef SYNTHESIS
//`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge aclr) 
      if (aclr) 
        qi = 0;
      //else if (apre) 
          //qi = 1;
        //else if (srl) 
            //qi = srd;
          else begin
            //if (sena) 
              qi = d;
          end
  //initial 
    //qi = 1'b0;
endmodule
//`endif
`ifdef SYNTHESIS
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
